<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- POM file generated with GWT webAppCreator -->
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.quant.tipl</groupId>
  <artifactId>GUI</artifactId>
  <parent>
        <groupId>quant.tipl</groupId>
        <artifactId>quant-tipl</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
  <packaging>war</packaging>
      <version>${tipl.version}</version>
    <name>gwt</name>
    <url>http://www.4quant.com</url>
    
  
  <properties>
    <!-- Convenience property to set the GWT version -->
    <gwtVersion>2.7.0</gwtVersion>
    <!-- Note: GWT needs at least java 1.6 -->
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>
            <!-- GAE properties -->
        <gae.version>1.7.1</gae.version>
        <gae.home>${user.home}/.m2/repository/com/google/appengine/appengine-java-sdk/${gae.version}/appengine-java-sdk-${gae.version}</gae.home>
        <gae.application.version>1</gae.application.version>
            <!-- Don't let your Mac use a crazy non-standard encoding -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>

  <dependencyManagement>
    <dependencies>
      <!-- ensure all GWT deps use the same version (unless overridden) -->
      <dependency>
        <groupId>com.google.gwt</groupId>
        <artifactId>gwt</artifactId>
        <version>${gwtVersion}</version>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

<dependencies>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_${scala.binary.version}</artifactId>
            <version>${spark.version}</version>
        </dependency>

        <dependency>
            <groupId>quant.tipl</groupId>
            <artifactId>tipl-core</artifactId>
            <version>${tipl.version}</version>
        </dependency>

        <dependency>
            <groupId>quant.tipl</groupId>
            <artifactId>tipl-spark</artifactId>
            <version>${tipl.version}</version>
        </dependency>
        <!-- for baseblockrunner class -->
        <dependency>
            <groupId>quant.tipl</groupId>
            <artifactId>tipl-workflows</artifactId>
            <version>${tipl.version}</version>
        </dependency>
        <!-- for having live visualizations -->
        <dependency>
            <groupId>quant.tipl</groupId>
            <artifactId>tipl-volviewer</artifactId>
            <version>${tipl.version}</version>
        </dependency>

        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
            <version>${gwtVersion}</version>
            <!-- "provided" so that we don't deploy -->
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
             <version>${gwtVersion}</version>
            <!-- "provided" so that we don't deploy -->
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-codeserver</artifactId>
             <version>${gwtVersion}</version>
            <!-- "provided" so that we don't deploy -->
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.web.bindery</groupId>
            <artifactId>requestfactory-server</artifactId>
             <version>${gwtVersion}</version>
        </dependency>
        <!-- Need to run the RF Validation tool. This works on both the command-line
             and in Eclipse, provided that m2e-apt is installed. -->
        <dependency>
            <groupId>com.google.web.bindery</groupId>
            <artifactId>requestfactory-apt</artifactId>
            <version>2.4.0</version>
            <!-- "provided" so that we don't deploy -->
            <scope>provided</scope>
        </dependency>
        <!-- RequestFactory will use JSR 303 javax.validation if you let it -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.0.0.GA</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>4.1.0.Final</version>
            <exclusions>
                <exclusion>
                    <groupId>javax.xml.bind</groupId>
                    <artifactId>jaxb-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.sun.xml.bind</groupId>
                    <artifactId>jaxb-impl</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Required by Hibernate validator because slf4j-log4j is
             optional in the hibernate-validator POM -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.6.1</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.6.1</version>
        </dependency>
        <!-- Google App Engine (GAE) -->
        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-1.0-sdk</artifactId>
            <version>${gae.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-testing</artifactId>
            <version>${gae.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-stubs</artifactId>
            <version>${gae.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.google.appengine</groupId>
            <artifactId>appengine-api-labs</artifactId>
            <version>${gae.version}</version>
        </dependency>
        <!-- Objectify for persistence. It uses the stock javax.persistence annotations 
        <dependency>
            <groupId>com.googlecode.objectify</groupId>
            <artifactId>objectify</artifactId>
            <version>3.0</version>
        </dependency> -->
        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>persistence-api</artifactId>
            <version>1.0</version>
        </dependency>
        <!-- GIN and Guice for IoC / DI -->
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>3.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.gwt.inject</groupId>
            <artifactId>gin</artifactId>
            <version>2.1.2</version>
        </dependency>
        <!-- Use the JSR 330 injection interfaces-->
        <dependency>
            <groupId>javax.inject</groupId>
            <artifactId>javax.inject</artifactId>
            <version>1</version>
        </dependency>
        <!-- Unit tests -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
  
  <build>
    
    <plugins>
      
      <!-- GWT Maven Plugin-->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <version>${gwtVersion}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <!-- Run tests through gwt:test, this allows reusing the plugin configuration for GWTTestCases -->
            <id>gwt-tests</id>
            <phase>test</phase>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
        <!-- Plugin configuration. There are many available options, 
             see gwt-maven-plugin documentation at codehaus.org --> 
        <configuration>
          <modules>
            <module>com.quant.tipl.GUI</module>
          </modules>
          <!-- URL that should be opened by DevMode (gwt:run). -->
          <runTarget>GUI.html</runTarget>
          <!-- Ask GWT to create the Story of Your Compile (SOYC) (gwt:compile) -->
          <compileReport>true</compileReport>
          <!-- Run tests using HtmlUnit -->
          <mode>htmlunit</mode>
          <!-- Tests patterns -->
          <includes>**/Test*.java,**/*Test.java,**/*TestCase.java</includes>
        </configuration>
      </plugin>

      <!-- Skip normal test execution, we use gwt:test instead -->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.17</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- NOTE: this is only needed if you use "mvn eclipse:eclipse". -->
      <!-- You can remove this plugin if you intend to only use the Maven integration in Eclipse, or another IDE -->
      <plugin>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>2.7</version>  <!--  Note 2.8 does not work with AspectJ aspect path -->
        <configuration>
          <downloadSources>true</downloadSources>
          <downloadJavadocs>false</downloadJavadocs>
          <wtpversion>2.0</wtpversion>
          <additionalBuildcommands>
            <buildCommand>
              <name>com.google.gwt.eclipse.core.gwtProjectValidator</name>
            </buildCommand>
          </additionalBuildcommands>
          <additionalProjectnatures>
            <projectnature>com.google.gwt.eclipse.core.gwtNature</projectnature>
          </additionalProjectnatures>
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>
